"""
/***************************************************************************
 StatCSVProcessing
                                 A QGIS plugin
 Read a CSV file and calculate the number of lines for each item in the specified column
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-07-10
        copyright            : (C) 2020 by Yoichi Kayama
        email                : yoichi.kayama@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Yoichi Kayama'
__date__ = '2021-01-28'
__copyright__ = '(C) 2021 by Yoichi Kayama'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


from qgis.core import QgsProcessing
from qgis.core import QgsProcessingAlgorithm
from qgis.core import QgsProcessingMultiStepFeedback
from qgis.core import QgsProcessingParameterEnum
from qgis.core import QgsProcessingParameterVectorLayer
from qgis.core import QgsProcessingParameterFile
from qgis.core import QgsProcessingParameterField
from qgis.core import QgsProcessingParameterCrs
from qgis.core import QgsProcessingParameterVectorDestination
import processing


class AggreagteValueAlgorithm(QgsProcessingAlgorithm):

    def initAlgorithm(self, config=None):
        self.addParameter(QgsProcessingParameterVectorLayer('inputlayer', '集計レイヤ', types=[QgsProcessing.TypeVectorAnyGeometry,QgsProcessing.TypeVector ], defaultValue=None))
        self.addParameter(QgsProcessingParameterField('agfield', '分類フィールド', type=QgsProcessingParameterField.String, parentLayerParameterName='inputlayer', allowMultiple=False, defaultValue=None))
        self.addParameter(QgsProcessingParameterField('cfield', '集計値フィールド', type=QgsProcessingParameterField.Numeric, parentLayerParameterName='inputlayer', allowMultiple=False, defaultValue=None))

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('出力レイヤ')
            )
        )

      

    def processAlgorithm(self, parameters, context, model_feedback):
        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        feedback = QgsProcessingMultiStepFeedback(5, model_feedback)
        results = {}
        outputs = {}
        model_feedback.pushConsoleInfo( "start")

        inputLayer = self.parameterAsVectorLayer(
            parameters,
            "inputlayer",
            context
        )

        agfields = self.parameterAsFields  (
             parameters,
             'agfield',
             context
        )

        cfields = self.parameterAsFields  (
             parameters,
             'cfield',
             context
        )


 

       # results['OUTPUT'] = outputs['Gdal_translate']['OUTPUT']
        return results

    def name(self):
        return 'AggreagteValueAlgorithm'

    def displayName(self):
        return '集計'

    def group(self):
        return '集計'

    def groupId(self):
        return 'Aggregate'

    def createInstance(self):
        return AggreagteValueAlgorithm()
