# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CSVtoStatProcessing
                                 A QGIS plugin
 Read a CSV file and calculate the number of lines for each item in the specified column
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-05-15
        copyright            : (C) 2020 by Yoichi Kayama
        email                : yoichi.kayama@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Yoichi Kayama'
__date__ = '2020-05-15'
__copyright__ = '(C) 2020 by Yoichi Kayama'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import ( QCoreApplication ,
                           QVariant)

from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingException,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterVectorDestination,
                       QgsProcessingParameterFile,
                       QgsProcessingOutputVectorLayer,
                       QgsVirtualLayerDefinition,
                       QgsVectorLayer,
                       QgsProcessingUtils,
                       QgsWkbTypes,
                       QgsField,
                       QgsFields,
                       QgsFeature,
                       QgsProcessingParameterString)
import processing
import sqlite3
import csv

class CSVtoStatProcessingAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'

    ENCODING = 'ENCODING'

    encode = ['SJIS','UTF-8']

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        self.addParameter(
            QgsProcessingParameterFile(
                self.INPUT,
                self.tr('Input csv file'),
                extension='csv'
            )
         )
        #  encoding of input file
        encParam = QgsProcessingParameterEnum(
                self.ENCODING,
                self.tr('select encoding of the file')
            )

        encParam.setOptions(self.encode)
        encParam.setAllowMultiple(False)
        encParam.setDefaultValue(QVariant('SJIS'))
        #  file encoding
        self.addParameter(
            encParam
        )



        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        csvfile = self.parameterAsFile(
            parameters,
            self.INPUT,
            context
        )
        if csvfile  is None:
            raise QgsProcessingException(self.tr('csv file error'))

        #df = QgsVirtualLayerDefinition()



        enc = self.parameterAsFile(
            parameters,
            self.ENCODING,
            context
        )

        basename = "memorylayer.gpkg"
        tmp_path = QgsProcessingUtils.generateTempFilename(basename)


        conn = sqlite3.connect(tmp_path)
     # sqliteを操作するカーソルオブジェクトを作成
        cur = conn.cursor()

        entbl = "sample_tbl"

     # 調査結果格納テーブルの作成
        crsql = 'CREATE TABLE \"' + entbl + '\"( address STRING, vn  STRING);'
        cur.execute( crsql)

        uri = csvfile
         # csv file read
        with open( uri, 'r', encoding=self.encode[int(enc)] ) as f:
             b = csv.reader(f)
             header = next(b)

             isql = 'insert into \"' + entbl + '\" values (?,?);'
             for t in b:

                 cur.execute(isql, t)

    # データベースへコミット。これで変更が反映される。
        conn.commit()



        sqlstr = 'create table temp_vlayer as select address, count(*) vn from \"' + entbl + '\"  group by address;'
         # 町名別集計
        cur.execute(sqlstr )






        result_def = tmp_path + '|layername=temp_vlayer'
        tgttable = "temp_vlayer"




        fields = QgsFields()
        fields.append(QgsField("Address", QVariant.String))
        fields.append(QgsField("count", QVariant.Int))

        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context,
                                               fields )



        # Compute the number of steps to display within the progress bar and
        # get features from source
        #total = 100.0 / resultlayer.featureCount() if resultlayer.featureCount() else 0
        #features = resultlayer.getFeatures()


        sqlstr = 'select address, vn  from temp_vlayer;'

        c = conn.cursor()


        for row in c.execute( sqlstr ):

        #for current, feature in enumerate(list1):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break



            nfeature = QgsFeature(fields)

            nfeature['address'] = row[0]
            nfeature['count'] = int(row[1])
            sink.addFeature(nfeature, QgsFeatureSink.FastInsert)

            # Update the progress bar
            #feedback.setProgress(int(current * total))


        conn.close()



        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        return {self.OUTPUT: dest_id }


    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'CSVtoStatProcessing'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return self.tr('Aggregate')

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CSVtoStatProcessingAlgorithm()
